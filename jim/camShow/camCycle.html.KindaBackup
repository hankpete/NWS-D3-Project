<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>HNX WebCam Viewer</title>
	<script src="d3/d3.min.js"></script>
	<script src="d3/topojson.min.js"></script>
	<style>
		* {
			margin: 0;
			padding: 0;
		}

		svg {
			position: absolute;
			width: 100%;
			height: 100%;
		}

		#zone-borders {
		  fill: none;
		  stroke-width: 1px;
		  stroke-linejoin: round;
		  stroke-linecap: round;
		  pointer-events: none;
	    }
	</style>
</head>
<body>
<script>

	//set up variables and functions we will need
	var width = window.innerWidth;
	var height = window.innerHeight;

	var bgColor = "#000";
	var zoneColor = "#ccc";
	var borderColor = "#aaa";
	var inactiveCirc = "#22a";
	var activeCirc = "#a22";
	var inactiveRad = 5;
	var activeRad = 7;

	var projectionFunc = d3.geo.mercator()	//world
		.scale(4000)
		.center([-119.6, 36.3])	//hnx coords
		.translate([width/6, height* 2/3]);

	var pathFunc = d3.geo.path()
		.projection(projectionFunc);

	var svg = d3.select("body").append("svg")
		.attr("width", width)
		.attr("height", height);

	svg.append("rect")
		.attr("x", "0")
		.attr("y", "0")
		.attr("width", width)
		.attr("height", height)
		.attr("fill", bgColor);

	var gMap = svg.append("g");
	var gCams = svg.append("g");

	//get hnx map data and plot it
	d3.json("hnxSaZones.json", function(error, hnx) {
		if (error) throw error;

		var zones = topojson.feature(hnx, hnx.objects.hnxsaZones).features;
		gMap.selectAll("path")
				.data(zones)
			.enter()
				.append("path")
				.attr("id", "zones")
				.attr("fill", zoneColor)
				.attr("d", pathFunc);

		gMap.append("path")
	        .datum(topojson.mesh(hnx, hnx.objects.hnxsaZones, function(a, b) {
			    return a !== b;
		    }))
	        .attr("id", "zone-borders")
			.attr("stroke", borderColor)
	        .attr("d", pathFunc);

	});

	//set up the data

	var camJson = [];
	d3.json("webCamLocations.json", function(error, data) {
		//set up the data and put the dots down
		if (error) { console.log("An error has occured:" + error); }

		camJson=data;
		console.log("camJson:",camJson);
		

    gMap.selectAll("circle.camPoints")
    	.data(camJson)
      .enter()
    	.append("circle")
    	.classed("camPoints", true)
			.attr("id", function(d, i) {
				return "cam-" + i;
			})
    	.attr("cx", function(d) {
    		return projectionFunc( [d.lon, d.lat] )[0];
    	})
    	.attr("cy", function(d) {
    		return projectionFunc( [d.lon, d.lat] )[1];
    	})
    	.attr("r", inactiveRad)
    	.attr("fill", inactiveCirc);

		//put cams on svg transparent
		gCams.selectAll("image.cam")
				.data(camJson)
			.enter()
				.append("image")
				.classed("cam", true)
				.attr("id", function(d, i) {
					return "cam-" + i;
				})
				.attr("x", "50%")
				.attr("y", 0)
				.attr("xlink:href", function(d) {return d.file; })
				.attr("width", width)
				.attr("height", height)
				.style("opacity", 0);
	});

	//run
	var index = 0;
	var transitionTime = 2000;
	var delay = 10000;
	main();


	function main() {
		initialize();
		cycle();
		setInterval(function() {
			cycle();
		}, transitionTime + delay);
	}


	function initialize() {
		//put cams on svg transparent
		gCams.selectAll("image.cam")
			.data(camJson)
		  .enter()
			.append("image")
			.classed("cam", true)
			.attr("x", width / 1)
			.attr("y", height / 1)
			.attr("xlink:href", function(d) { return d.camLink; })
			.attr("width", width / 2)
			.attr("height", height / 2)
			.style("opacity", 0);
	}


	function cycle() {
		//heighlight where it is and put the cam up
		var next = index;
		var previous = index-1;
		var camsNum = camJson.length;

		//previous cam
		gMap.selectAll( "circle#cam-" + (previous % camsNum) )
			.transition()
				.duration(transitionTime)
				.attr("fill", inactiveCirc)
				.attr("r", inactiveRad);

		gCams.selectAll( "image#cam-" + (previous % camsNum) )
			.transition()
				.duration(transitionTime)
				.style("opacity", 0);

		//next cam
		gMap.selectAll( "circle#cam-" + (next % camsNum) )
			.transition()
				.duration(transitionTime)
				.attr("fill", activeCirc)
				.attr("r", activeRad);
		gCams.selectAll( "image#cam-" + (next % camsNum) )
			.transition()
				.duration(transitionTime)
				.style("opacity", 1);

		//!!!!
		index++;
	}



</script>
</body>
</html>
